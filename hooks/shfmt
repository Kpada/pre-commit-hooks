#!/usr/bin/env bash

set -o errexit -o nounset

# Checks if the shfmt tool is installed.
check_shfmt_installed() {
  if ! command -v shfmt >/dev/null 2>&1; then
    echo >&2 'Error: shfmt is not installed.'
    exit 1
  fi
}

# Checks the version of the shfmt tool.
check_shfmt_version() {
  local version
  version="$(shfmt -version 2>&1)"

  # Extract the major version number.
  local major_version
  major_version=$(echo "${version}" | grep -oE 'v?[0-9]+\.[0-9]+\.[0-9]+' | grep -oE '[0-9]+' | head -n 1)

  # Check if the version is v3 or higher.
  if [ "${major_version}" -lt 3 ]; then
    echo >&2 'Error: shfmt v3 or higher is required.'
    exit 1
  fi
}

# Checks if the given options are valid for the shfmt command.
#
# Parameters:
#   - options: An array of options to be passed to the shfmt command.
check_options() {
  local -ar options=("$@")
  local -r filename='/dev/null'

  if ! shfmt "${options[@]}" ${filename} >/dev/null 2>&1; then
    echo >&2 "Error: Invalid args '${options[*]}'"
    exit 1
  fi
}

# Runs the shfmt tool on a specified file with the given options.
#
# Parameters:
#   - $1: The file to format.
#   - $*: The list of shfmt options.
run_shfmt_on_file() {
  local -r file="${1:?Missing file parameter}"
  shift
  local -ar options=("$@")

  if ! shfmt "${options[@]}" --write --diff "${file}" >/dev/null 2>&1; then
    echo "${file}"
    return 1
  fi
}

main() {
  if [ $# -eq 0 ]; then
    echo >&2 'Error: No arguments specified'
    exit 1
  fi

  check_shfmt_installed
  check_shfmt_version

  # Separate options and files.
  local options=()
  local files=()
  local found_first_file=false

  for arg in "$@"; do
    if [[ ${found_first_file} == true || -f ${arg} ]]; then
      files+=("${arg}")
      found_first_file=true
    else
      options+=("${arg}")
    fi
  done

  check_options "${options[@]}"

  # Run shfmt on each file with the collected options.
  local failed=0
  for file in "${files[@]}"; do
    if ! run_shfmt_on_file "${file}" "${options[@]}"; then
      failed=1
    fi
  done

  exit ${failed}
}

main "$@"
